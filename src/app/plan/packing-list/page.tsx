
"use client";

import { useState } from "react";
import { useTripData } from "@/hooks/use-trip-data";
import type { PackingListItem } from "@/lib/types";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { PackingItemForm } from "@/components/forms/PackingItemForm";
import { PackingListItemRow } from "@/components/planning/PackingListItemRow";
import { PlusCircle, Backpack, Plane } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import Link from "next/link";
import { useRouter } from "next/navigation";


export default function PackingListPage() {
  const { 
    activeTripData, 
    addPackingItem, 
    updatePackingItem, 
    removePackingItem, 
    isLoading 
  } = useTripData();
  const router = useRouter();

  const [isItemFormOpen, setIsItemFormOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<PackingListItem | null>(null);

  if (isLoading) {
    return <div>Cargando lista de empaque...</div>; // Consider a Skeleton loader here
  }

  if (!activeTripData) {
     return (
      <div className="flex flex-col items-center justify-center h-full text-center">
        <Plane className="w-24 h-24 text-muted-foreground mb-6" />
        <h2 className="text-2xl font-semibold mb-2">No hay un viaje activo.</h2>
        <p className="mb-4 text-muted-foreground">Por favor, crea o selecciona un viaje para ver la lista de empaque.</p>
        <Button onClick={() => router.push('/plan/new')}>
          <PlusCircle className="mr-2 h-4 w-4" /> Crear Nuevo Viaje
        </Button>
      </div>
    );
  }

  const handleSaveItem = (item: PackingListItem) => {
    if (editingItem) {
      updatePackingItem(item);
    } else {
      // For a new item, the 'id' will be generated by addPackingItem
      // So we pass an Omit<PackingListItem, 'id'> or ensure addPackingItem handles it.
      // Based on current hook, addPackingItem expects Omit<PackingListItem, 'id'>
      const { id, ...itemData } = item; // eslint-disable-line @typescript-eslint/no-unused-vars
      addPackingItem(itemData);
    }
    setEditingItem(null);
    setIsItemFormOpen(false);
  };

  const handleEditItem = (item: PackingListItem) => {
    setEditingItem(item);
    setIsItemFormOpen(true);
  };

  const currentPackingList = activeTripData.packingList || [];

  const priorities: PackingListItem['priority'][] = ['Alta', 'Media', 'Baja'];
  const groupedItems = priorities.map(priority => ({
    priority,
    items: currentPackingList.filter(item => item.priority === priority).sort((a,b) => a.name.localeCompare(b.name))
  }));

  const totalItems = currentPackingList.length;
  const packedItems = currentPackingList.filter(item => item.packed).length;

  return (
    <div className="space-y-6 animate-fadeIn">
      <Card className="shadow-lg">
        <CardHeader>
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center">
            <div className="flex items-center gap-3">
              <Backpack className="h-10 w-10 text-primary" />
              <div>
                <CardTitle className="text-3xl font-headline text-primary">Lista de Empaque</CardTitle>
                <CardDescription className="text-lg">
                  Organiza todo lo que necesitas para tu viaje a {activeTripData.destination}.
                </CardDescription>
              </div>
            </div>
            <Dialog open={isItemFormOpen} onOpenChange={setIsItemFormOpen}>
              <DialogTrigger asChild>
                <Button onClick={() => setEditingItem(null)} className="mt-4 md:mt-0">
                  <PlusCircle className="mr-2 h-4 w-4" /> Añadir Artículo
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[425px]">
                <DialogHeader>
                  <DialogTitle className="font-headline text-2xl">
                    {editingItem ? "Editar Artículo" : "Añadir Nuevo Artículo"}
                  </DialogTitle>
                </DialogHeader>
                <PackingItemForm
                  onSubmit={handleSaveItem}
                  initialData={editingItem}
                  onCancel={() => { setEditingItem(null); setIsItemFormOpen(false);}}
                />
              </DialogContent>
            </Dialog>
          </div>
          <div className="mt-4 text-sm text-muted-foreground">
            {totalItems > 0 ? `${packedItems} de ${totalItems} artículos empacados.` : 'Aún no has añadido artículos a tu lista.'}
          </div>
        </CardHeader>
        <CardContent>
          {totalItems === 0 ? (
            <p className="text-muted-foreground text-center py-8">
              Tu lista de empaque está vacía. ¡Añade tu primer artículo!
            </p>
          ) : (
            <ScrollArea className="h-[calc(100vh-20rem)] md:h-[calc(100vh-22rem)]"> {/* Adjust height as needed */}
              <div className="space-y-6 pr-4">
                {groupedItems.map(group => (
                  group.items.length > 0 && (
                    <div key={group.priority}>
                      <h3 className="text-xl font-semibold font-headline mb-2 border-b pb-1">{group.priority} Prioridad</h3>
                      <div className="space-y-2">
                        {group.items.map(item => (
                          <PackingListItemRow
                            key={item.id}
                            item={item}
                            onTogglePacked={(packed) => updatePackingItem({ ...item, packed })}
                            onEdit={() => handleEditItem(item)}
                            onRemove={() => removePackingItem(item.id)}
                          />
                        ))}
                      </div>
                    </div>
                  )
                ))}
              </div>
            </ScrollArea>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
