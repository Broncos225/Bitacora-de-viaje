
"use client";

import { useState } from "react";
import { useTripData } from "@/hooks/use-trip-data";
import type { AccommodationStay } from "@/lib/types";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { AccommodationStayForm } from "@/components/forms/AccommodationStayForm";
import { PlusCircle, BedDouble, Plane, Edit3, Trash2 } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useRouter } from "next/navigation";
import { format, parseISO } from "date-fns";
import { es } from "date-fns/locale";
import { useToast } from "@/hooks/use-toast";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle as AlertDialogTitleComponent,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";


export default function AccommodationsPage() {
  const { 
    activeTripData, 
    addAccommodationStay, 
    updateAccommodationStay, 
    removeAccommodationStay, 
    isLoading 
  } = useTripData();
  const router = useRouter();
  const { toast } = useToast();

  const [isStayFormOpen, setIsStayFormOpen] = useState(false);
  const [editingStay, setEditingStay] = useState<AccommodationStay | null>(null);

  if (isLoading) {
    return <div>Cargando alojamientos...</div>; 
  }

  if (!activeTripData) {
     return (
      <div className="flex flex-col items-center justify-center h-full text-center">
        <Plane className="w-24 h-24 text-muted-foreground mb-6" />
        <h2 className="text-2xl font-semibold mb-2">No hay un viaje activo.</h2>
        <p className="mb-4 text-muted-foreground">Por favor, crea o selecciona un viaje para gestionar los alojamientos.</p>
        <Button onClick={() => router.push('/plan/new')}>
          <PlusCircle className="mr-2 h-4 w-4" /> Crear Nuevo Viaje
        </Button>
      </div>
    );
  }

  const handleSaveStay = (stay: AccommodationStay) => {
    if (editingStay) {
      updateAccommodationStay(stay);
      toast({ title: "Estancia Actualizada", description: "La información del alojamiento ha sido actualizada." });
    } else {
      // For new stay, id is generated by context/hook. Pass Omit<AccommodationStay, 'id'>
      const { id, ...newStayData } = stay; // eslint-disable-line @typescript-eslint/no-unused-vars
      addAccommodationStay(newStayData as Omit<AccommodationStay, 'id'>);
      toast({ title: "Estancia Añadida", description: "El nuevo alojamiento ha sido añadido."});
    }
    setEditingStay(null);
    setIsStayFormOpen(false);
  };

  const handleEditStay = (stay: AccommodationStay) => {
    setEditingStay(stay);
    setIsStayFormOpen(true);
  };

  const handleRemoveStay = (stayId: string) => {
    removeAccommodationStay(stayId);
    toast({ title: "Estancia Eliminada", description: "El alojamiento ha sido eliminado."});
  };

  const currentAccommodationStays = (activeTripData.accommodationStays || []).sort(
    (a,b) => parseISO(a.startDate).getTime() - parseISO(b.startDate).getTime()
  );
  const totalStays = currentAccommodationStays.length;

  return (
    <div className="space-y-6 animate-fadeIn">
      <Card className="shadow-lg">
        <CardHeader>
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center">
            <div className="flex items-center gap-3">
              <BedDouble className="h-10 w-10 text-primary" />
              <div>
                <CardTitle className="text-3xl font-headline text-primary">Alojamientos del Viaje</CardTitle>
                <CardDescription className="text-lg">
                  Gestiona dónde te hospedarás durante tu viaje a {activeTripData.destination}.
                </CardDescription>
              </div>
            </div>
            <Dialog open={isStayFormOpen} onOpenChange={(isOpen) => {
              setIsStayFormOpen(isOpen);
              if (!isOpen) setEditingStay(null); // Reset editingStay when dialog closes
            }}>
              <DialogTrigger asChild>
                <Button onClick={() => setEditingStay(null)} className="mt-4 md:mt-0">
                  <PlusCircle className="mr-2 h-4 w-4" /> Añadir Alojamiento
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[600px]">
                <DialogHeader>
                  <DialogTitle className="font-headline text-2xl">
                    {editingStay ? "Editar Alojamiento" : "Añadir Nuevo Alojamiento"}
                  </DialogTitle>
                </DialogHeader>
                 <AccommodationStayForm
                   onSubmit={handleSaveStay}
                   initialData={editingStay}
                   tripStartDate={activeTripData.startDate}
                   tripEndDate={activeTripData.endDate}
                   onCancel={() => { setEditingStay(null); setIsStayFormOpen(false);}}
                 />
              </DialogContent>
            </Dialog>
          </div>
           <div className="mt-4 text-sm text-muted-foreground">
            {totalStays > 0 ? `Tienes ${totalStays} estancia(s) de alojamiento planificada(s).` : 'Aún no has añadido ningún alojamiento a tu viaje.'}
          </div>
        </CardHeader>
        <CardContent>
          {totalStays === 0 ? (
            <p className="text-muted-foreground text-center py-8">
              No hay alojamientos planificados. ¡Añade tu primera estancia!
            </p>
          ) : (
            <ScrollArea className="h-[calc(100vh-20rem)] md:h-[calc(100vh-22rem)]">
              <div className="space-y-4 pr-4">
                {currentAccommodationStays.map(stay => (
                  <Card key={stay.id} className="shadow-md">
                    <CardHeader>
                      <div className="flex justify-between items-start">
                        <div>
                            <CardTitle className="text-xl font-semibold">{stay.name}</CardTitle>
                            <CardDescription>
                                {format(parseISO(stay.startDate), "PPP", { locale: es })} - {format(parseISO(stay.endDate), "PPP", { locale: es })}
                            </CardDescription>
                        </div>
                        <div className="flex gap-1">
                            <Button variant="ghost" size="icon" onClick={() => handleEditStay(stay)} aria-label="Editar estancia">
                                <Edit3 className="h-5 w-5" />
                            </Button>
                            <AlertDialog>
                                <AlertDialogTrigger asChild>
                                    <Button variant="ghost" size="icon" aria-label="Eliminar estancia">
                                        <Trash2 className="h-5 w-5 text-destructive" />
                                    </Button>
                                </AlertDialogTrigger>
                                <AlertDialogContent>
                                    <AlertDialogHeader>
                                        <AlertDialogTitleComponent>¿Eliminar esta estancia?</AlertDialogTitleComponent>
                                        <AlertDialogDescription>
                                            Se eliminará "{stay.name}" ({format(parseISO(stay.startDate), "d MMM", { locale: es })} - {format(parseISO(stay.endDate), "d MMM", { locale: es })}). Esta acción no se puede deshacer.
                                        </AlertDialogDescription>
                                    </AlertDialogHeader>
                                    <AlertDialogFooter>
                                        <AlertDialogCancel>Cancelar</AlertDialogCancel>
                                        <AlertDialogAction onClick={() => handleRemoveStay(stay.id)} className="bg-destructive hover:bg-destructive/90">
                                            Eliminar
                                        </AlertDialogAction>
                                    </AlertDialogFooter>
                                </AlertDialogContent>
                            </AlertDialog>
                        </div>
                      </div>
                    </CardHeader>
                    {(stay.location || stay.cityRegion || stay.address || stay.notes || stay.reservationInfo || stay.budget) && (
                        <CardContent className="text-sm space-y-1">
                            {stay.location && <p><span className="font-medium">Lugar:</span> {stay.location}</p>}
                            {stay.cityRegion && <p><span className="font-medium">Ciudad/Región:</span> {stay.cityRegion}</p>}
                            {stay.address && <p><span className="font-medium">Dirección:</span> {stay.address}</p>}
                            {stay.budget && stay.budget > 0 && <p><span className="font-medium">Presupuesto:</span> ${stay.budget.toLocaleString()}</p>}
                            {stay.reservationInfo && <p><span className="font-medium">Reserva:</span> {stay.reservationInfo}</p>}
                            {stay.notes && <p className="italic"><span className="font-medium">Notas:</span> {stay.notes}</p>}
                        </CardContent>
                    )}
                  </Card>
                ))}
              </div>
            </ScrollArea>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
